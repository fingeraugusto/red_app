from typing import Generator, List, Tuple
import cantera as ct
import numpy as np
import csv
from os import listdir
from os.path import isfile, join


def load_solution_from_txt_file(file_path: str) -> Tuple[np.ndarray, str, float]:
    """
    Use to load the Solution from IDT model generated by Augusto Finger Pacheco.
    See the save functon from IDT reactor.
    """
    if file_path.endswith(".txt"):
        raw_str = ""
        with open(file_path, 'r') as f:
            raw_str = f.readlines()
        
        if raw_str:
            i = 0
            while (raw_str[i].strip("\n") != "INITIAL_CONDITION:"):
                i += 1
            i += 1
            if i < len(raw_str):
                header_size = len(raw_str[i].split(";")) - 1
                n_states = len(raw_str) - i - 1
                all_data = np.zeros([n_states, header_size])    # T, P, Y...
                j = 0
                i += 1
                while i < len(raw_str):
                    _aux_data = [float(x) for x in raw_str[i].split(",")]
                    all_data[j, 0] = _aux_data[1]   # Temperature [1]
                    all_data[j, 1] = _aux_data[2]   # Pressure
                    all_data[j, 2:] = _aux_data[3:] # spc Y
                    i += 1
                    j += 1
                return all_data, "IDT", None


def load_solution_from_csv_file(file_path: str) -> Tuple[np.ndarray, str, float]:
    """
    Use to load the Solution from LFS.
    Returns TPX, model_type, model_propertie.
    """
    if file_path.endswith(".csv"):
        raw_str = ""
        with open(file_path, 'r', newline='') as csv_f:
            raw_str = csv.reader(csv_f, delimiter=',', quotechar='|')
        
            all_lines = [row for row in raw_str]

            reader_index = 0
            model = "None"
            model_value = None
            if all_lines[reader_index][0].startswith("MODEL"):
                model = all_lines[reader_index][0].split("_")[1]
                model_value = float(all_lines[reader_index][0].split("=")[1])
                reader_index += 1              
            
            # search for T index, P index and the first species
            temp_index = all_lines[reader_index].index('T')
            if 'P' in all_lines[reader_index]:
                press_index = all_lines[reader_index].index('P')
            else:
                # try to get the value from the file_path as T_P_phi.csv
                _aux = file_path.split("_")
                if len(_aux) >= 3:
                    pressure_value = float(_aux[-2]) * ct.one_atm
                else:
                    pressure_value = ct.one_atm
                press_index = -1
            spc_index = temp_index
            while all_lines[reader_index][spc_index].startswith("X_") is False:
                spc_index += 1
            
            all_data = np.zeros([len(all_lines) - 1 - reader_index, 2 + len(all_lines[1]) - spc_index])
            for i, row in enumerate(all_lines[reader_index + 1:]):
                all_data[i,0] = float(row[temp_index])
                if press_index >= 0:
                    all_data[i,1] = float(row[press_index])
                else:
                    all_data[i,1] = pressure_value
                all_data[i, 2:] = [float(x) for x in row[spc_index:]]
            return all_data, model, model_value
        

def load_all_file_path_from_dir(dir_to_look: str ) -> List[str]:
    """Load the file paths inside the dir"""
    return [join(dir_to_look, f) for f in listdir(dir_to_look) if isfile(join(dir_to_look, f))]


def load_solution(file_path: str) -> Tuple[np.ndarray, bool]:
    """Interface to correctly choose the type of function for loading the file.
    return the nd_array, model_type, model_propertie, is_mass_fraction"""
    if file_path.endswith(".csv"):
        return *load_solution_from_csv_file(file_path), False
    return *load_solution_from_txt_file(file_path), True


def get_state(files_dir: str) -> Generator[Tuple[float, float, List[float]], None, None]:
    """Use to generate all the TP(Y,X) states inside a directory."""
    all_files = load_all_file_path_from_dir(files_dir)
    is_mass_fraction = False

    # load one at a time
    for f in all_files:

        # all loaded data
        all_state, model, model_propertie, is_mass_fraction = load_solution(f)
        for state in all_state:
            yield state[0], state[1], state[2:], is_mass_fraction




if __name__ == "__main__":
    dir = "C:\\Users\\1511 IRON\\Desktop\\P贸s\\Doutorado\\PapersToBe\\Virtual_N_HEP\\red_teste2\\Homework_assignment_FPFlame_phi=0.7_(-)radiation_(-)Soret.csv"
    dir_to_save = "C:\\Users\\1511 IRON\\Desktop\\P贸s\\Doutorado\\PapersToBe\\Virtual_N_HEP\\red_teste4\\LFS_300.0_1.00_1.0.csv"
    a = load_solution_from_csv_file(dir_to_save)
    print(a[0])

    # for a in get_TPY_state("C:\\Users\\1511 IRON\\Desktop\\P贸s\\Doutorado\\PapersToBe\\Virtual_N_HEP\\DET_SOLUTION_DATA\\"):
    #     print(a[2])
    #     aa = input()
    # aux = load_solution_from_txt_file("C:\\Users\\1511 IRON\\Desktop\\P贸s\\Doutorado\\PapersToBe\\Virtual_N_HEP\\DET_SOLUTION_DATA\\600.0_1.0_1.0.txt")
    # print(aux[1,:])